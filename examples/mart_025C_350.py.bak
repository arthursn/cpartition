#!/usr/bin/env python

import numpy as np
import time

import sys
import os
from cpartition import *


basename = os.path.basename(__file__).replace('.py', '')
wc0 = 0.25e-2  # initial wt. fraction of carbon
c0 = w2x(wc0)  # initial at. fraction of carbon
T_C = 350.  # temperature

# Iteration steps
control_itsteps = ControlIterationSteps([5e-7, 5e-6, 5e-5, 5e-4],
                                        [0, .01, .1, 1, 10])
total_time = control_itsteps.total_time
n_time = control_itsteps.ntime
dt = control_itsteps.dt
each = 200  # export carbon profiles every <each> iteration
control_itsteps.print_summary()

# martensite grid
mart = BCC(T_C=T_C, dt=dt,
           z=np.linspace(-.1, 0, 200), c0=c0,
           tdata='../thermo/Fe-C/350-BCC.TXT')
# austenite grid
aust = FCC(T_C=T_C, dt=dt,
           z=np.linspace(0, .03, 200), c0=c0,
           tdata='../thermo/Fe-C/350-FCC.TXT')
# austenite/martensite interface
intf = Interface(domain1=mart, domain2=aust, type_int='fixed.fluxes')

# Initialize log
log = SimulationLog(basename)
log.set_domains([('mart', mart), ('aust', aust)])
log.set_interfaces([('intf', intf)])
log.set_conditions(c0, T_C, total_time, n_time)
log.initialize(False)

for it in control_itsteps.itlist:
    if it in control_itsteps.itstepi and it > 0:
        control_itsteps.next_itstep()
        dt = control_itsteps.dt

        mart.dt = dt
        aust.dt = dt

    # Calculate compositions at the interface
    intf.comp(poly_deg=2)
    # intf.comp(c0=c0)

    # Solve FDM in both phases
    aust.FDM_implicit(bc0=(1, 0, 0, intf.ci_fcc))
    mart.FDM_implicit(bcn=(1, 0, 0, intf.ci_bcc))

    # Update position of interfaces and interpolate compositions
    aust.update_grid(it)
    mart.update_grid(it)

    # Print iteration log and stores C profile data
    log.printit(it, each)

log.close()

# Save carbon profiles
# filename can be provide, creates directory C_profiles and
# save data there
log.save_cprofiles()
# Save average carbon data (C_avg directory)
log.save_properties('cavg')
# Save interface compositions data (C_extremities directory)
log.save_properties('ci*')
# Save interface positions data (pos_extremities directory)
log.save_properties('s*')
